// app/api/generate-image/route.ts
import { fal } from "@fal-ai/client";
import { NextResponse } from 'next/server';

export async function GET() {
  try {
    // Configure fal.ai client (ensure you've set FAL_API_KEY in your environment)
    const fal = new FalClient(process.env.FAL_API_KEY); 

    // Stream the workflow
    const stream = await fal.stream("workflows/bakursky/landscape-image-generation", {
      input: {} // Add any specific input parameters if required
    });

    // Collect the final result
    const result = await stream.done();

    // Log the image URL (assuming the result contains an image URL)
    console.log('Generated Image URL:', result.image?.url);

    // Optionally, you can save the image URL to a database or perform other actions
    return NextResponse.json({ 
      success: true, 
      imageUrl: result.image?.url 
    });

  } catch (error) {
    console.error('Image generation error:', error);
    return NextResponse.json({ 
      success: false, 
      error: error instanceof Error ? error.message : 'Unknown error' 
    }, { status: 500 });
  }
}

// Ensure this route is not cached
export const dynamic = 'force-dynamic';










import { fal } from "@fal-ai/client";
import { NextResponse } from "next/server";

export async function POST() {
  try {
    const stream = await fal.stream("workflows/bakursky/landscape-image-generation", {
      input: {}, // Add required inputs here if necessary
    });

    let imageUrl = null;
    let streamCompleted = false; // Track if the stream completes successfully

    // Process all events emitted by the workflow stream
    for await (const event of stream) {
      console.log("Event received:", JSON.stringify(event, null, 2));

      // Check for an event with type "completion" that contains images
      if (event.type === "completion" && event.output?.images?.length > 0) {
        imageUrl = event.output.images[0]?.url; // Capture the first image URL
      }
    }

    // Ensure the workflow stream completes
    try {
      await stream.done();
      streamCompleted = true;
    } catch (doneError) {
      console.error("Error completing workflow stream:", doneError);
    }

    // Check if the stream was marked as completed
    if (!streamCompleted) {
      throw new Error("Workflow stream did not complete successfully.");
    }

    // After completion, check if a valid image URL was found
    if (!imageUrl || !imageUrl.startsWith("http")) {
      throw new Error("No valid Image URL was generated by the workflow.");
    }

    // Return the image URL as a successful response
    return NextResponse.json({ success: true, imageUrl });
  } catch (error) {
    console.error("Error in workflow processing:", error);
    return NextResponse.json({ success: false, error: error.message });
  }
}
